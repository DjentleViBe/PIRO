name: Update README with PR info

on:
  push:
    branches:
      - main   # Trigger when there's a push to the main branch
      - LU_decomp_HTLF
  schedule:
    - cron: "0 0 * * *" # Optional: Run the workflow daily at midnight

jobs:
 update-readme:
  runs-on: ubuntu-latest

  steps:
  - name: Checkout repository
    uses: actions/checkout@v2
  - name: Install LibreSans font
    run: |
          sudo apt-get update
          sudo apt-get install -y fonts-liberation
  - name: Set up Python
    uses: actions/setup-python@v2
    with:
        python-version: '3.8'
  - name: Install dependencies
    run: |
          python -m pip install --upgrade pip
          pip install -r .github/workflows/requirements.txt
  - name: Set Git user identity
    run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"

  - name: Get the latest Pull Request Number and update PR
    id: pr_number
    run: |
      PR_RESPONSE=$(curl -H "Authorization: token ${{ secrets.FINE_GRAINED_TOKEN }}" \
      "https://api.github.com/repos/${{ github.repository }}/pulls?state=open")
      echo "PR Response: $PR_RESPONSE"  # Debugging line

      # Check if there are any open PRs
      if [ "$(echo $PR_RESPONSE | jq length)" -gt 0 ]; then
      PR_NUMBER=$(echo $PR_RESPONSE | jq '.[0].number')
      echo "::set-output name=pr_number::$PR_NUMBER"

      python .github/workflows/genimage.py "$PR_NUMBER Open"
      git diff --exit-code pics/*.png
        if [ $? -eq 0 ]; then
        echo "No changes in the image files, skipping commit."
        else
        # Stage the changed image files
        git add pics/Issue_num.png
        git add pics/Issues.png
        git add pics/PR.png
        git add pics/PR_num.png
        git add pics/Readme_status.png
        git add pics/Version.png
        git add pics/Version_num.png

        # Commit the changes
        git commit -m "Update README status with latest PR number"
        
        # Push the changes to the remote repository
        git push https://x-access-token:${{ secrets.FINE_GRAINED_TOKEN }}@github.com/${{ github.repository }}.git
        fi
      else
      echo "No open pull requests found."
      echo "::set-output name=pr_number::none"
      fi
      - name: Checkout
      uses: actions/checkout@v4
  - name: Build draft PDF
    uses: openjournals/openjournals-draft-action@master
    with:
      journal: joss
      # This should be the path to the paper within your repo.
      paper-path: paper.md
  - name: Upload
    uses: actions/upload-artifact@v4
    with:
      name: paper
      # This is the output path where Pandoc will write the compiled
      # PDF. Note, this should be the same directory as the input
      # paper.md
      path: paper.pdf